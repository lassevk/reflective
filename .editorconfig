root = true

[*.xml, *.js, *.css]
# Tabs and indentation
indent_style = space
indent_size = 2
tab_width = 2

[*.{cs,vb}]
# Visual Studio - .NET code style settings - "This." and "Me." qualifiers
dotnet_style_qualification_for_field = false:suggestion
dotnet_style_qualification_for_property = false:suggestion
dotnet_style_qualification_for_method = false:suggestion
dotnet_style_qualification_for_event = false:suggestion

# Visual Studio - .NET code style settings - Language keywords instead of framework type names for type references
dotnet_style_predefined_type_for_locals_parameters_members = true:suggestion
dotnet_style_predefined_type_for_member_access = false:suggestion

# Visual Studio - .NET code style settings - Modifier preferences
dotnet_style_require_accessibility_modifiers = always
csharp_preferred_modifier_order = public, private, protected, internal, static, extern, new, virtual, abstract, sealed, override, readonly, unsafe, volatile, async:suggestion
visual_basic_preferred_modifier_order = Partial, Default, Private, Protected, Public, Friend, NotOverridable, Overridable, MustOverride, Overloads, Overrides, MustInherit, NotInheritable, Static, Shared, Shadows, ReadOnly, WriteOnly, Dim, Const,WithEvents, Widening, Narrowing, Custom, Async:suggestion

# Visual Studio - .NET code style settings - Expression-level preferences
dotnet_style_object_initializer = true:suggestion
dotnet_style_collection_initializer = true:suggestion
dotnet_style_explicit_tuple_names = true:suggestion
dotnet_style_prefer_inferred_tuple_names = true:suggestion
dotnet_style_prefer_inferred_anonymous_type_member_names = true:suggestion

# Visual Studio - .NET code style settings - Null-checking preferences
dotnet_style_coalesce_expression = true:suggestion
dotnet_style_null_propagation = true:suggestion

# Visual Studio - .NET naming conventions - Public Members
dotnet_naming_rule.public_members_must_be_capitalized.symbols = public_symbols
dotnet_naming_symbols.public_symbols.applicable_kinds = property, method, field, event, delegate
dotnet_naming_symbols.public_symbols.applicable_accessibilities = public
dotnet_naming_symbols.public_symbols.required = readonly
dotnet_naming_rule.public_members_must_be_capitalized.style = first_word_upper_case_style
dotnet_naming_style.first_word_upper_case_style.capitalization = first_word_upper
dotnet_naming_rule.public_members_must_be_capitalized.severity = warning

# Visual Studio - .NET naming conventions - Private Fields
dotnet_naming_rule.private_fields_must_be_underscore_prefixed.symbols = private_fields
dotnet_naming_symbols.private_fields.applicable_kinds = field
dotnet_naming_symbols.private_fields.applicable_accessibilities = private
dotnet_naming_symbols.private_fields.required = readonly
dotnet_naming_rule.private_fields_must_be_underscore_prefixed.style = underscore_prefixed_style
dotnet_naming_style.underscore_prefixed_style.capitalization = first_word_upper
dotnet_naming_style.underscore_prefixed_style.required_prefix = _
dotnet_naming_rule.private_fields_must_be_underscore_prefixed.severity = warning

[*.cs]
# Visual Studio - C# code style settings - Implicit and explicit types
csharp_style_var_for_built_in_types = true:suggestion
csharp_style_var_when_type_is_apparent = true:suggestion
csharp_style_var_elsewhere = false:suggestion

# Visual Studio - C# code style settings - Expression-bodied members
csharp_style_expression_bodied_methods = when_on_single_line:suggestion
csharp_style_expression_bodied_constructors= when_on_single_line:suggestion
csharp_style_expression_bodied_operators = when_on_single_line:suggestion
csharp_style_expression_bodied_properties = when_on_single_line:suggestion
csharp_style_expression_bodied_indexers = when_on_single_line:suggestion
csharp_style_expression_bodied_accessors = when_on_single_line:suggestion

# Visual Studio - C# code style settings - Pattern matching
csharp_style_pattern_matching_over_is_with_cast_check = true:suggestion
csharp_style_pattern_matching_over_as_with_null_check = true:suggestion

# Visual Studio - C# code style settings - Inlined variable declarations
csharp_style_inlined_variable_declaration = true:suggestion

# Visual Studio - C# code style settings - Expression-level preferences
csharp_prefer_simple_default_expression = true:suggestion
csharp_style_deconstructed_variable_declaration = true:suggestion
csharp_style_pattern_local_over_anonymous_function = true:suggestion

# Visual Studio - C# code style settings - "Null" checking preferences
csharp_style_throw_expression = true:suggestion
csharp_style_conditional_delegate_call = true:suggestion

# Visual Studio - C# code style settings - Code block preferences
csharp_prefer_braces = false:none

# Visual Studio - .NET Formatting conventions - Organize usings
dotnet_sort_system_directives_first = true

# Visual Studio - C# formatting settings - Newline options
csharp_new_line_before_open_brace = all
csharp_new_line_before_else = true
csharp_new_line_before_catch = true
csharp_new_line_before_finally = true
csharp_new_line_before_members_in_object_initializers = true
csharp_new_line_before_members_in_anonymous_types = true
csharp_new_line_between_query_expression_clauses = true

# Visual Studio - C# formatting settings - Indentation options
csharp_indent_case_contents = true
csharp_indent_switch_labels = true
csharp_indent_labels = one_less_than_current

# Visual Studio - C# formatting settings - Spacing options
csharp_space_after_cast = false
csharp_space_after_keywords_in_control_flow_statements = true
csharp_space_between_method_declaration_parameter_list_parentheses	 = false
csharp_space_between_method_call_parameter_list_parentheses = false
csharp_space_between_parentheses = false

# Visual Studio - C# formatting settings - Wrapping options
csharp_preserve_single_line_statements = false
csharp_preserve_single_line_blocks = true

# ReSharper - C# - Blank Lines - General
resharper_blank_lines_around_region = 1
resharper_blank_lines_inside_region = 1
resharper_blank_lines_before_single_line_comment = 1

# ReSharper - C# - Blank Lines - Blank Lines in Declarations
resharper_keep_blank_lines_in_declarations = 1
resharper_remove_blank_lines_near_braces_in_declarations = true
resharper_blank_lines_after_start_comment = 0
resharper_blank_lines_between_using_groups = 1
resharper_blank_lines_after_using_list = 1
resharper_blank_lines_around_namespace = 1
resharper_blank_lines_inside_namespace = 0
resharper_blank_lines_around_type = 1
resharper_blank_lines_inside_type = 0
resharper_blank_lines_around_field = 1
resharper_blank_lines_around_single_line_field = 0
resharper_blank_lines_around_property = 1
resharper_blank_lines_around_single_line_property = 0
resharper_blank_lines_around_auto_property = 1
resharper_blank_lines_around_single_line_auto_property = 1
resharper_blank_lines_around_invocable = 1
resharper_blank_lines_around_single_line_invocable = 0

# ReSharper - C# - Blank Lines - Blank Lines in Code
resharper_keep_blank_lines_in_code = 1
resharper_remove_blank_lines_near_braces_in_code = true
resharper_blank_lines_around_local_method = 1
resharper_blank_lines_around_single_line_local_method = 0
resharper_blank_lines_before_control_transfer_statements = 0
resharper_blank_lines_after_control_transfer_statements = 1
resharper_blank_lines_before_block_statements = 0
resharper_blank_lines_after_block_statements = 1
resharper_blank_lines_before_multiline_statements = 0
resharper_blank_lines_after_multiline_statements = 1

# ReSharper - C# - Braces Layout - Braces Layout
resharper_brace_style = next_line
resharper_type_declaration_braces = next_line
resharper_invocable_declaration_braces = next_line
resharper_anonymous_method_declaration_braces = next_line
resharper_accessor_owner_declaration_braces = next_line
resharper_accessor_declaration_braces = next_line
resharper_case_block_braces = next_line
resharper_initializer_braces = next_line
resharper_other_braces = next_line
resharper_allow_comment_after_lbrace = false
resharper_empty_block_style = multiline

# ReSharper - C# - CodeStyle - 'var' Usage in Declarations
resharper_for_built_in_types = use_var_when_evident
resharper_for_simple_types = use_var_when_evident
resharper_for_other_types = use_var_when_evident

# ReSharper - C# - CodeStyle - Prefer separate declarations for deconstructed variables
resharper_prefer_separate_deconstructed_variables_declaration = true # ???

# ReSharper - C# - CodeStyle - Use 'var' keyword for discards
resharper_prefer_explicit_discard_declaration = false

# ReSharper - C# - CodeStyle - Instance Members Qualification
resharper_instance_members_qualify_members = none
resharper_instance_members_qualify_declared_in = base_class

# ReSharper - C# - CodeStyle - Static Members Qualification
resharper_static_members_qualify_with = declared_type
resharper_static_members_qualify_members = none

# ReSharper - C# - CodeStyle - Built-in Type Naming
resharper_builtin_type_reference_style = use_keyword

# ReSharper - C# - CodeStyle - Reference Qualification
resharper_prefer_qualified_reference = false
resharper_add_imports_to_deepest_scope = false
resharper_allow_alias = true
resharper_can_use_global_alias = true

# ReSharper - C# - CodeStyle - Modifiers
resharper_default_private_modifier = explicit
resharper_default_internal_modifier = explicit
# resharper_modifiers_order = ???

# ReSharper - C# - CodeStyle - Arguments
resharper_arguments_literal = positional
resharper_arguments_string_literal = positional
resharper_arguments_named = positional
resharper_arguments_anonymous_function = positional
resharper_arguments_other = positional

# ReSharper - C# - CodeStyle - Parentheses
resharper_parentheses_redundancy_style = remove_if_not_clarifies_precedence
resharper_parentheses_non_obvious_operations = lowest

# ReSharper - C# - CodeStyle - Braces
resharper_braces_for_ifelse = required_for_multiline
resharper_braces_for_for = required_for_multiline
resharper_braces_for_foreach = required_for_multiline
resharper_braces_for_while = required_for_multiline
resharper_braces_for_dowhile = required
resharper_braces_for_using = required_for_multiline
resharper_braces_for_lock = required
resharper_braces_for_fixed = required
resharper_braces_redundant = true

# ReSharper - C# - CodeStyle - Code Body
resharper_method_or_operator_body = expression_body
resharper_local_function_body = expression_body
resharper_constructor_or_destructor_body = block_body
resharper_accessor_owner_body = expression_body
resharper_use_heuristics_for_body_style = true
resharper_force_attribute_style = join

# ReSharper - C# - Tabs, Indents, Alignment - General
resharper_indent_style = spaces
resharper_indent_size = 4
resharper_tab_size = 4
resharper_continuous_indent_multiplier = 1

# ReSharper - C# - Tabs, Indents, Alignment - Nested Statements
resharper_indent_nested_usings_stmt = false
resharper_indent_nested_fixed_stmt = false
resharper_indent_nested_lock_stmt = false
resharper_indent_nested_for_stmt = true
resharper_indent_nested_foreach_stmt = true
resharper_indent_nested_while_stmt = true

# ReSharper - C# - Tabs, Indents, Alignments - Parenthesis
resharper_use_continuous_indent_inside_parens = true
resharper_indent_method_decl_pars = inside
resharper_indent_invocation_pars = inside
resharper_indent_statement_pars = outside_and_inside
resharper_indent_typeparam_angles = outside_and_inside
resharper_indent_typearg_angles = outside_and_inside
resharper_indent_pars = outside_and_inside

# ReSharper - C# - Tabs, Indents, Alignments - Preprocessor Directives
resharper_indent_preprocessor_if = no_indent
resharper_indent_preprocessor_region = usual_indent
resharper_indent_preprocessor_other = no_indent

# ReSharper - C# - Tabs, Indents, Alignments - Other Indents
indent_switch_labels = true
resharper_indent_type_constraints = true
resharper_stick_comment = false

# ReSharper - C# - Tabs, Indents, Alignments - Align Multiline Constructs
resharper_alignment_tab_fill_style = use_spaces
resharper_align_multiline_parameter = true
resharper_align_multiline_extends_list = true
resharper_align_linq_query = true
resharper_align_multiline_binary_expressions_chain = true
resharper_outdent_binary_ops = true
resharper_align_multiline_calls_chain = false
resharper_outdent_dots = true
resharper_align_multiline_array_and_object_initializer = false
resharper_indent_anonymous_method_block = false
resharper_align_first_arg_by_paren = false
resharper_align_multiline_argument = false
resharper_align_tuple_components = false
resharper_align_multiline_expression = false
resharper_align_multiline_for_stmt = true
resharper_align_multiple_declaration = false
resharper_align_multline_type_parameter_list = false
resharper_align_multline_type_parameter_constrains = false
resharper_outdent_commas = true

# ReSharper - C# - Tabs, Indents, Alignments - Align Similar Code in Columns
resharper_int_align = false

# ReSharper - C# - Line Breaks - General
resharper_keep_existing_linebreaks = false
max_line_length = 120
resharper_wrap_before_comma = false
resharper_special_else_if_treatment = true
insert_final_newline = false

# ReSharper - C# - Line Breaks - Arrangement of Attributes
resharper_max_attribute_length_for_same_line = 40
resharper_keep_existing_attribute_arrangement = false
resharper_place_type_attribute_on_same_line = never
resharper_place_method_attribute_on_same_line = never
resharper_place_accessorholder_attribute_on_same_line = never
resharper_place_accessor_attribute_on_same_line = never
resharper_place_field_attribute_on_same_line = never

# ReSharper - C# - Line Breaks - Arrangement of Method Signatures
resharper_wrap_parameters_style = wrap_if_long
resharper_keep_existing_declaration_parens_arrangement = false
resharper_wrap_before_declaration_lpar = false
resharper_wrap_after_declaration_lpar = false
resharper_wrap_before_declaration_rpar = false
resharper_place_constructor_initializer_on_same_line = false

# ReSharper - C# - Line Breaks - Arrangement of Expression Bodied Members
resharper_keep_existing_expr_member_arrangement = false
resharper_place_expr_method_on_single_line = if_owner_is_single_line
resharper_place_expr_property_on_single_line = if_owner_is_single_line
resharper_place_expr_accessor_on_single_line = if_owner_is_single_line
resharper_wrap_before_arrow_with_expressions = true

# ReSharper - C# - Line Breaks - Arrangement of Type Parameters, Constraints and Base Types
resharper_place_type_constraints_on_same_line = false
resharper_wrap_before_first_type_parameter_constraint = true
resharper_wrap_multiple_type_parameter_constraints_style = chop_always
resharper_wrap_before_type_parameter_langle = false
resharper_wrap_before_extends_colon = false
resharper_wrap_extends_list_style = wrap_if_long

# ReSharper - C# - Line Breaks - Arrangement of Declaration Blocks
resharper_keep_existing_declaration_block_arrangement = false
resharper_place_abstract_accessorholder_on_single_line = true
resharper_place_simple_accessorholder_on_single_line = false
resharper_place_accessor_with_attrs_holder_on_single_line = false
resharper_place_simple_accessor_on_single_line = false
resharper_place_simple_method_on_single_line = false

# ReSharper - C# - Line Breaks - Arrangement of Statements
new_line_before_else = true
resharper_new_line_before_while = true
new_line_before_catch = true
new_line_before_finally = true
resharper_wrap_for_stmt_header_style = chop_if_long
resharper_wrap_multiple_declaration_style = chop_if_long

# ReSharper - C# - Line Breaks - Arrangement of Embedded Statements
resharper_keep_existing_embedded_arrangement = false
resharper_place_simple_embedded_statement_on_same_line = never
resharper_place_simple_case_statement_on_same_line = never

# ReSharper - C# - Line Breaks - Arrangement of Embedded Blocks
resharper_keep_existing_embedded_block_arrangement = false
resharper_place_simple_embedded_block_on_same_line = false
resharper_place_simple_anonymousmethod_on_single_line = false

# ReSharper - C# - Line Breaks - Arrangement of Initializers
resharper_keep_existing_initializer_arrangement = false
resharper_place_simple_initializer_on_single_line = true
resharper_wrap_object_and_collection_initializer_style = chop_if_long
resharper_wrap_array_initializer_style = wrap_if_long
resharper_wrap_arguments_style = wrap_if_long
resharper_keep_existing_invocation_parens_arrangement = false
resharper_wrap_before_invocation_lpar = false
resharper_wrap_after_invocation_lpar = false
resharper_wrap_before_invocation_rpar = false

# ReSharper - C# - Line Breaks - Arrangement of Member Access Expressions
resharper_wrap_after_dot_in_method_calls = false
resharper_wrap_chained_method_calls = chop_if_long
resharper_wrap_before_binary_opsign = true
resharper_wrap_chained_binary_expressions = chop_if_long
resharper_force_chop_compound_if_expression = false
resharper_force_chop_compound_while_expression = false
resharper_force_chop_compound_do_expression = false

# ReSharper - C# - Line Breaks - Arrangement of Ternary Expressions
resharper_wrap_before_ternary_opsigns = true
resharper_wrap_ternary_expr_style = chop_if_long
resharper_nested_ternary_style = autodetect

# ReSharper - C# - Line Breaks - Arrangement of LINQ Expressions
resharper_wrap_linq_expressions = chop_if_long
resharper_wrap_before_linq_expression = true
resharper_place_linq_into_on_new_line = true

# ReSharper - C# - Other - Other
resharper_old_engine = false

# ReSharper - C# - Spaces - Preserve Existing Formatting
resharper_extra_spaces = remove_all
resharper_space_before_if_parentheses = true
resharper_space_before_while_parentheses = true
resharper_space_before_catch_parentheses = true
resharper_space_before_switch_parentheses = true
resharper_space_before_for_parentheses = true
resharper_space_before_foreach_parentheses = true
resharper_space_before_using_parentheses = true
resharper_space_before_lock_parentheses = true
resharper_space_before_fixed_parentheses = true
resharper_space_before_method_call_parentheses = false
resharper_space_before_empty_method_call_parentheses = false
resharper_space_before_method_parentheses = false
resharper_space_before_empty_method_parentheses = false
resharper_space_before_typeof_parentheses = false
resharper_space_before_default_parentheses = false
resharper_space_before_checked_parentheses = false
resharper_space_before_sizeof_parentheses = false
resharper_space_before_nameof_parentheses = false
resharper_space_between_keyword_and_expression = true
resharper_space_between_keyword_and_type = true

# ReSharper - C# - Spaces - Within Parentheses in Statements
resharper_space_within_if_parentheses = false
resharper_space_within_while_parentheses = false
resharper_space_within_catch_parentheses = false
resharper_space_within_switch_parentheses = false
resharper_space_within_for_parentheses = false
resharper_space_within_foreach_parentheses = false
resharper_space_within_using_parentheses = false
resharper_space_within_lock_parentheses = false
resharper_space_within_fixed_parentheses = false

# ReSharper - C# - Spaces - Within Other Parentheses
resharper_space_within_parentheses = false
resharper_space_between_typecast_parentheses = false
space_between_method_declaration_parameter_list_parentheses = false
space_between_method_declaration_empty_parameter_list_parentheses = false
space_between_method_call_parameter_list_parentheses = false
space_between_method_call_empty_parameter_list_parentheses = false
resharper_space_within_typeof_parentheses = false
resharper_space_within_default_parentheses = false
resharper_space_within_checked_parentheses = false
resharper_space_within_sizeof_parentheses = false
resharper_space_within_nameof_parentheses = false

# ReSharper - C# - Spaces - Around Array Brackets
resharper_space_before_array_access_brackets = false
resharper_space_before_array_rank_brackets = false
resharper_space_within_array_access_brackets = false
resharper_space_within_array_rank_brackets = false
resharper_space_within_array_rank_empty_brackets = false

# ReSharper - C# - Spaces - Around Angle Brackets
resharper_space_before_type_parameter_angle = false
resharper_space_before_type_argument_angle = false
resharper_space_within_type_parameter_angles = false
resharper_space_within_type_argument_angles = false

# ReSharper - C# - Spaces - Around Braces
resharper_space_before_singleline_accessorholder = true
resharper_space_in_singleline_accessorholder = true
resharper_space_between_accessors_in_singleline_property = true
resharper_space_within_empty_braces = true
resharper_space_in_singleline_method = true
resharper_space_in_singleline_anonymous_method = true
resharper_space_within_single_line_array_initializer_braces = true

# ReSharper - C# - Spaces - Around Binary Operators
resharper_space_around_assignment_op = true
resharper_space_around_logical_op = true
resharper_space_around_equality_op = true
resharper_space_around_relational_op = true
resharper_space_around_bitwise_op = true
resharper_space_around_additive_op = true
resharper_space_around_multiplicative_op = true
resharper_csharp_space_around_binary_operator = true
resharper_space_around_nullcoalescing_op = true
resharper_space_around_arrow_op = false

# ReSharper - C# - Spaces - After Unary Operators
resharper_space_after_logical_not_op = false
resharper_space_after_unary_minus_op = false
resharper_space_after_unary_plus_op = false
resharper_space_after_ampersand_op = false
resharper_space_after_asterik_op = false
resharper_space_near_postfix_and_prefix_op = false

# ReSharper - C# - Spaces - In Ternary Operator
resharper_space_before_ternary_quest = true
resharper_space_after_ternary_quest = true
resharper_space_before_ternary_colon = true
resharper_space_after_ternary_colon = true

# ReSharper - C# - Spaces - Around Comma and Semicolon
space_before_comma = false
space_after_comma = true
space_before_semicolon_in_for_statement = false
space_after_semicolon_in_for_statement = true
resharper_space_before_semicolon = false

# ReSharper - C# - Spaces - Around Colon
space_before_colon_in_inheritance_clause = true
space_after_colon_in_inheritance_clause = true
resharper_space_before_type_parameter_constraint_colon = false
resharper_space_after_type_parameter_constraint_colon = true
resharper_space_before_colon_in_case = false
resharper_space_after_colon_in_case = true
resharper_space_before_colon = false
resharper_space_after_colon = true

# ReSharper - C# - Spaces - Attributes
resharper_space_between_attribute_sections = false
resharper_space_within_attribute_brackets = false
resharper_space_after_attributes = true

# ReSharper - C# - Spaces - Other
space_after_cast = false
resharper_space_around_member_access_operator = false
resharper_space_around_lambda_arrow = true
resharper_space_before_pointer_asterik_declaration = false
resharper_space_before_nullable_mark = false
resharper_space_around_alias_eq = true
resharper_space_before_trailing_comment = true
resharper_space_after_operator_keyword = true

# # true = prefer to use object-initializers
# dotnet_style_object_initializer = true:suggestion
# dotnet_style_collection_initializer = true:suggestion
# 
# # true = require tuple member names
# dotnet_style_explicit_tuple_names = true:warning
# 
# # true = prefer "x ?? y" instead of "x != null ? x : y"
# dotnet_style_coalesce_expression = true:suggestion
# 
# # true = prefer "o?.ToString()" instead of "o != null ? o.ToString() : null"
# dotnet_style_null_propagation = true:suggestion
# 
# # false = prefer "int x = 5" instead of "var x = 5"
# 
# # true = prefer "var x = " when the type of x is apparent (usually because RHS specifies type directly)
# csharp_style_var_when_type_is_apparent = true:suggestion
# 
# # false = prefer not to use "var" unless one of the above says otherwise
# csharp_style_var_elsewhere = false:suggestion
# 
# # true = prefer expression bodied methods (when possible)
# csharp_style_expression_bodied_methods = true:suggestion
# csharp_style_expression_bodied_constructors = true:suggestion
# csharp_style_expression_bodied_operators = true:suggestion
# csharp_style_expression_bodied_properties = true:suggestion
# csharp_style_expression_bodied_indexers = true:suggestion
# 
# # false = prefer older style get { ... } and set { ... } when accessors are necessary
# csharp_style_expression_bodied_accessors = false:suggestion
# 
# # true = prefer new syntax for pattern matching when possible
# csharp_style_pattern_matching_over_is_with_cast_check = true:suggestion
# csharp_style_pattern_matching_over_as_with_null_check = true:suggestion
# 
# # true = prefer new inline variable declarations if possible
# csharp_style_inlined_variable_declaration = true:suggestion
# 
# # true = prefer new throw syntax when possible
# csharp_style_throw_expression = true:suggestion
# 
# # true = prefer "func?.Invoke()" instead of "if (func != null) func();"
# csharp_style_conditional_delegate_call = true:suggestion
# 
